// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  username      String?    @unique
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  favoriteIds   String[]   @db.ObjectId
  Posts         Post[]
  comments      Comment[]
  following     Follower[] @relation("UserToFollowing")
  followers     Follower[] @relation("UserToFollower")
  account       Account[]
   likedPosts PostLike[]
   postViews PostView[]
}

model Follower {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  followerId String @db.ObjectId
  user       User   @relation("UserToFollower", fields: [userId], references: [id])
  follower   User   @relation("UserToFollowing", fields: [followerId], references: [id])

  @@unique([userId, followerId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String?
  provider          String?
  providerAccountId String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  image     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
   likes    PostLike[]
  user      User      @relation(fields: [userId], references: [id])
  likesCount Int?
  views  PostView[] 
  
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  userId  String @db.ObjectId
  postId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model PostLike {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  userId String @db.ObjectId
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
}

model PostView{
   id     String  @id @default(auto()) @map("_id") @db.ObjectId
    postId String @db.ObjectId
   userId String @db.ObjectId
   viewAt DateTime @default(now())
   user User @relation(fields: [userId],references: [id])
   post   Post @relation(fields: [postId], references: [id])

}